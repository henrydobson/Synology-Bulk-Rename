#!/usr/syno/synoha/bin/bash

### Usage: Copy hdRename to /bin/
### Using the FULL PATH with TRAILING /
### --noop: Dry Run Mode
### -s= | --source= : Source path
### Real World example:
### Dry run on /volume1/My\ Share/ : $ hdRename -s=/volume1/My\ Share/ --noop
### Live run on /volume1/My\ Share/ and /volume1/Another\ Share/ : $ hdRename -s=/volume1/My\ Share/ -s=/volume1/Another\ Share/

# Default Paramaters.
export NOOP=False
declare -a SOURCES=()

# Parse options for command.
for i in "$@"; do
	case $i in
	    --noop)
	    NOOP=True
	    shift 	# past argument=value
	    ;;
	    -s=*|--source=*)
	    SOURCES=("${SOURCES[@]}" "${i#*=}")
	    shift 	# past argument=value
	    ;;
	    *)
	            # unknown option
	    ;;
	esac
done

/bin/touch /var/log/hdRename.log
LOG=/var/log/hdRename.log

# Saves file descriptors so they can be restored to whatever they were
# before redirection or used themselves to output to whatever they were before the following redirect.
exec 3>&1 4>&2

# Restore file descriptors for particular signals.
# Not generally necessary since they should be restored when the sub-shell exits.
trap 'exec 2>&4 1>&3' 0 1 2 3

# Redirect stdout to file log.out then redirect stderr to stdout. Note that the order is important
# when you want them going to the same file. stdout must be redirected before stderr is redirected to stdout.
exec 1>>$LOG 2>&1

RENAMEFUNC ()
{
# Function Paramaters.
	ORIG=$1
	# FNAME=`echo "$ORIG" | rev | cut -d'/' -f1 | rev` ### rev not available on Synology.
	FNAME=`basename "$ORIG"`

	printf "\n####\n`date`"
# Set NEWNAME based on if the source is file or directory.
	if [[ -f "$ORIG" ]]; then
		NEWNAME=`echo "$FNAME" | sed 's/[\\:*?\"<>|]/_/g'`
		NEWPATH="${ORIG/$FNAME/$NEWNAME}"
	elif [[ -d "$ORIG" ]]; then
		NEWNAME=`echo "$FNAME" | sed 's/[\\:*?\"<>|.]/_/g'`
		NEWPATH="${ORIG/$FNAME/$NEWNAME}"
	else
		printf "\n:( !!! Not a file or folder."
	fi

# Only rename if the source is different to the NEWNAME.
	if [[ "$FNAME" == "$NEWNAME" ]] || [[ "$FNAME" == ".TemporaryItems" ]] || [[ "$FNAME" == folders.* ]]; then
		printf "\nName OK."
		printf "\nSource: $ORIG"
	elif [[ "$FNAME" != "$NEWNAME" ]]; then
		if [[ $NOOP == 'True' ]]; then
			printf "\n√√√ Would move...\n\nOrig: $ORIG \nto...\nNew: $NEWPATH"
		elif [[ $NOOP == 'False' ]]; then
			printf "\n√√√ Moving...\n\nOrig: $ORIG \nto...\nNew: $NEWPATH\n"
			mv "$ORIG" "$NEWPATH"
		fi
	fi
	printf "\n\n"
}

time for f in "${SOURCES[@]}"; do
				export -f RENAMEFUNC
        printf "\n### Renaming folders in: $f ... \n\n"
				find "$f" -depth -type d -exec /usr/syno/synoha/bin/bash -c 'RENAMEFUNC "$0"' '{}' \;
				find "$f" -depth -type f -exec /usr/syno/synoha/bin/bash -c 'RENAMEFUNC "$0"' '{}' \;
        printf "### :) Completed folders in $f \n\n"
done
